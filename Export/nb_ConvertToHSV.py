
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/ConvertToHSV.ipynb
import numpy as np
import matplotlib.pyplot as plt
import cv2

from Export.nb_PixelManipulation import iterateImage, showImage, getChannels
from Export.nb_HistogramEqualisation import compareTwoImages, computeHistogram, plotHistogram, ChannelRange, enhanceContrast

def showEachChannel(img, **kwargs):
    plt.figure(figsize=(20,10))
    plt.subplot(1,3,1);
    showImage(img[:, :, 0], **kwargs)
    plt.subplot(1,3,2);
    showImage(img[:, :, 1], **kwargs)
    plt.subplot(1,3,3);
    showImage(img[:, :, 2], **kwargs)

def convertToGrey(img : np.array, convert_to_value: bool = False):

    _, height, width, channels, im_size = getChannels(img)
    if channels != 3 : print('Error! 3 channel image expected RGB2GRAY'); return
    weight_vector = np.ndarray(3, dtype = np.float32)
    if convert_to_value:
        weight_vector.fill(0.333333)
    else:
        weight_vector[:] = [0.2989, 0.5870, 0.1140]

    i = 0; j = 0; k = 0
    for px in np.nditer(img, op_flags = ['readwrite']):
        if k == 0 :
            update_px = px
        update_px[...] += np.uint8(px * weight_vector[k])
        i, j, k = iterateImage(i, j, k, 3, width)
    return img[:, :, 0]

def getHueFromChroma(col_arr : np.array, chroma: np.float32, max_col : np.float32, min_col : np.float32):
    if chroma == 0:
        hue = 255
    elif max_col == 0:
        hue = (col_arr[1] - col_arr[2]) / chroma
        hue %= 6
    elif max_col == 1:
        hue = (col_arr[2] - col_arr[0]) / chroma
        hue += 2
    elif max_col == 2:
        hue = (col_arr[0] - col_arr[1]) / chroma
        hue += 4
    hue *= (255/6)
    return hue

def getSatuationFromChroma(col_arr : np.array, chroma : np.float32, value : np.float32):
    saturation = 0 if value == 0 else (chroma / value) * (255/3) # chroma capped at range(0,0,255)/mean(0,0,255)
    return saturation

def convertRGBToHSVColor(colours : np.array):
    col_arr = np.float32(colours)
    min_col = colours.argmin()
    max_col = colours.argmax()
    chroma = col_arr[max_col] - col_arr[min_col]
    hue = getHueFromChroma(col_arr, chroma, max_col, min_col)
    value = np.mean(col_arr)
    saturation = getSatuationFromChroma(col_arr, chroma, value)
    return np.array([hue, saturation, value], dtype = np.uint8)

def convertToHSV(img : np.array):

    _, _, width, channels, im_size = getChannels(img)
    if channels != 3: print('Error! 3 channels are expected RGB2HSV'); return
    current_colour = np.ndarray(3, dtype = np.uint8)
    current_queue = [None] * 3

    i = 0; j = 0; k = 0
    for px in np.nditer(img, op_flags = ['readwrite']):
        current_colour[k] = px
        current_queue[k] = px
        i, j, k = iterateImage(i, j, k, channels, width)
        if k == 0:
            current_colour[:] = convertRGBToHSVColor(current_colour)
            for chan in range(3):
                current_queue[chan][...] = current_colour[chan]
    return img