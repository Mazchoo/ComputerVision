
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Pixel_Manipulation.ipynb
export_test = True

import time
def timeSomething(func, n_iter, *args, **kwargs):
    start_time = time.time()
    for i in range(n_iter): func(*args, **kwargs)
    end_time = time.time() - start_time
    end_time /= n_iter
    print('Average time is :', end_time)


def getChannels(img):

    if len(img.shape) == 2:
        height, width = img.shape
        channels = 1
        img.reshape(height, width, 1)
        return img, height, width, channels, width*height

    if len(img.shape) == 3:
        height, width, channels = img.shape
        return img, height, width, channels, width*height

    print('That does not look like an image to me.')

def iterateImage(i, j, k, width, height):
    j += 1
    if j == width: j = 0; i += 1
    if i == height: j = 0; i = 0; k+=1
    return i, j, k

def createCountTable(table_shape):
    output = np.ndarray(table_shape, dtype = np.uint32)
    output.fill(0)
    return output


def computeHistogram(img, n_bins, lower_thresh = 0, upper_thresh = 255):

    if upper_thresh > 255: upper_thresh = 256
    if lower_thresh < 0: lower_thresh = -1
    if lower_thresh > upper_thresh:
        x = upper_thresh; upper_thresh = lower_thresh; lower_thresh = x

    img, height, width, channels, im_size = getChannels(img)

    output_table = createCountTable((channels, n_bins + 1))
    bucket_size = (upper_thresh - lower_thresh - 2) // n_bins
    bucket_size = np.max((bucket_size, 1))

    i = 0; j = 0; k = 0
    for px in np.nditer(img):
        if (px > upper_thresh): i, j, k = iterateImage(i, j, k, width, height); continue
        if (px < lower_thresh): i, j, k = iterateImage(i, j, k, width, height); continue
        hist_bin = px - lower_thresh
        hist_bin //= bucket_size
        output_table[k, hist_bin] += 1
        i, j, k = iterateImage(i, j, k, width, height)

    return output_table


import matplotlib.pyplot as plt

def plotHistogram(output_table, col_channels = ('b', 'g', 'r')):
    plt.figure(figsize=(15,8))
    for k in range(len(output_table)):
        hist = output_table[k]
        plt.plot(hist, c = col_channels[k])